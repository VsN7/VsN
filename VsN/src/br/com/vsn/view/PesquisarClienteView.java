/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.vsn.view;

import br.com.vsn.controller.ClienteController;
import br.com.vsn.model.Cliente;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author vitor
 */
public class PesquisarClienteView extends javax.swing.JInternalFrame {

    private static int id;
    SimpleDateFormat sdf;
    static Cliente cliente;
    String valorCombo;
    public static int validador = 0;
    ClienteController cc;
    public static int getId() {
        return id;
    }

    public static void setId(int id) {
        PesquisarClienteView.id = id;
    }
    
    
    /**
     * Creates new form PesquisarView
     */
    public PesquisarClienteView() {
        sdf = new SimpleDateFormat("dd/MM/yyyy");
        initComponents();
        cc = new ClienteController();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        double lar =d.getWidth();
        int alt = (int) d.getHeight();
        this.setLocation((int) ((lar - this.getSize().width) / 2), (alt - this.getSize().height)/6);
        initComponents();
        
        try {
            this.preencherTabela();
        } catch (Exception ex) {
            Logger.getLogger(PesquisarClienteView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        inputSelecionado = new javax.swing.JTextField();
        comboFiltro = new javax.swing.JComboBox<>();
        comboTipoFiltro = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Pesquisar Cliente");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Telefone", "Situação"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(80);
        }

        inputSelecionado.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputSelecionado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputSelecionadoKeyReleased(evt);
            }
        });

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nome", "CPF" }));

        comboTipoFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Começa Com", "Contém" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboTipoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(inputSelecionado))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(inputSelecionado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboTipoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if(evt.getClickCount() == 2){
          try {
              
                this.id = this.valorCollun();
                ClienteController cc = new ClienteController();
                cliente = cc.pesquisarUnico(id).get(0);
                if(validador == 0){
                    if(ClienteView.buttonSelecionar.getText().equals("Buscar")){
                        this.valoresInputCliente();
                        ClienteView.ativarInputCadastrar();
                        ClienteView.inputId.setEnabled(true);
                    }
                }else{
                    if(validador ==1){
                        this.valoresInputOrcamento();
                    }else if(validador ==2){
                        this.valoresInputOS();
                    }else if (validador ==3){
                        this.valoresInputContasReceber();
                    }else if(validador ==4){
                        this.valoresInputRelatorioClientesGeral();
                    }else if(validador ==5){
                        this.valoresInputRelatorioContasReceber();
                    }
                }
                this.dispose();
            } catch (Exception ex) {
                Logger.getLogger(PesquisarClienteView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void inputSelecionadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputSelecionadoKeyReleased
        try{
            valorCombo=comboFiltro.getSelectedItem().toString().toLowerCase();
            if(valorCombo.equals("nome")){
                if(comboTipoFiltro.getSelectedIndex() == 0)
                this.preencherTabelaFiltroNome("");
                else
                this.preencherTabelaFiltroNome("%");
            }else if(valorCombo.equals("cpf")){
                if(comboTipoFiltro.getSelectedIndex() == 0)
                this.preencherTabelaFiltroCpf("");
                else
                this.preencherTabelaFiltroCpf("%");
            }

        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "Você está digitando muito rápido\nFeche o filtro e abra novamente!", "Aviso", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_inputSelecionadoKeyReleased



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboFiltro;
    private javax.swing.JComboBox<String> comboTipoFiltro;
    private javax.swing.JTextField inputSelecionado;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    public void preencherTabela() throws Exception{
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        ClienteController cc = new ClienteController();
        DefaultTableModel modelo = (DefaultTableModel)jTable1.getModel();
        modelo.setNumRows(0);
        for(int i=0; i<cc.pesquisarFiltroAll().size(); i++){
            modelo.addRow(new Object[]{
             cc.pesquisarFiltroAll().get(i).getId(),
             cc.pesquisarFiltroAll().get(i).getNome(),
             cc.pesquisarFiltroAll().get(i).getCpf(),
             cc.pesquisarFiltroAll().get(i).getTelefone(),
             cc.pesquisarFiltroAll().get(i).getSituacao()
             });
        }
        
    }
    
    public void preencherTabelaFiltroNome(String like) throws Exception{
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        DefaultTableModel modelo = (DefaultTableModel)jTable1.getModel();
        modelo.setNumRows(0);
        for(int i=0; i<cc.pesquisarFiltroNome(like+inputSelecionado.getText()).size(); i++){
            modelo.addRow(new Object[]{
             cc.pesquisarFiltroNome(like+inputSelecionado.getText()).get(i).getId(),
             cc.pesquisarFiltroNome(like+inputSelecionado.getText()).get(i).getNome(),
             cc.pesquisarFiltroNome(like+inputSelecionado.getText()).get(i).getCpf(),
             cc.pesquisarFiltroNome(like+inputSelecionado.getText()).get(i).getTelefone(),
             cc.pesquisarFiltroNome(like+inputSelecionado.getText()).get(i).getSituacao()
             });
        }
        
    }
    
    public void preencherTabelaFiltroCpf(String like) throws Exception{
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        DefaultTableModel modelo = (DefaultTableModel)jTable1.getModel();
        modelo.setNumRows(0);
        for(int i=0; i<cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).size(); i++){
            modelo.addRow(new Object[]{
             cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).get(i).getId(),
             cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).get(i).getNome(),
             cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).get(i).getCpf(),
             cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).get(i).getTelefone(),
             cc.pesquisarFiltroCpf(like+inputSelecionado.getText()).get(i).getSituacao()
             });
        }
        
    }
    
    public int valorCollun(){
        int row = jTable1.getSelectedRow();
        Object value = null;
        String converteValueString = "";
         if (row > -1) { //então tem ítem selecionado
             value = jTable1.getValueAt(row, 0);
         }
         converteValueString = ""+value;
         id = Integer.parseInt(converteValueString);
         return id;
   }
    
    public void valoresInputCliente(){
        ClienteView.inputId.setText(""+cliente.getId());
        ClienteView.inputNome.setText(""+cliente.getNome());
        ClienteView.inputCpf.setText(""+cliente.getCpf());
        ClienteView.inputDtNascimento.setText(""+sdf.format(cliente.getDataNascimento().getTime()));
        ClienteView.comboSexo.setSelectedItem((String) cliente.getSexo());
        ClienteView.inputLongradouro.setText(""+cliente.getLongradouro());
        ClienteView.inputNumero.setText(""+cliente.getNumero());
        ClienteView.inputBairro.setText(""+cliente.getBairro());
        ClienteView.inputCidade.setText(""+cliente.getCidade());
        ClienteView.comboEstado.setSelectedItem((String)cliente.getEstado());
        ClienteView.inputCep.setText(""+cliente.getCep());
        ClienteView.inputTelefone.setText(""+cliente.getTelefone());
        ClienteView.inputEmail.setText(""+cliente.getEmail());
        ClienteView.inputSituacao.setText(""+cliente.getSituacao());  
    }
    
    public void valoresInputOrcamento(){
        OrcamentoView.inputCliente.setText(""+cliente.getNome());
        OrcamentoView.inputCpf.setText(""+cliente.getCpf());
    } 
    public void valoresInputOS(){
        OrdemServicoView.inputCliente.setText(""+cliente.getNome());
        OrdemServicoView.inputCpf.setText(""+cliente.getCpf());
    }
    
    public void valoresInputRelatorioClientesGeral(){
        RelatorioClientesGeralView.inputId.setText(""+cliente.getId());
        RelatorioClientesGeralView.inputNome.setText(""+cliente.getNome());
    }
    
    public void valoresInputContasReceber(){
        ContaReceberView.inputCliente.setText(""+cliente.getNome());
    }
    public void valoresInputRelatorioContasReceber(){
        FiltroRelatorioContasReceberView.inputCliente.setText(""+cliente.getNome());
    }

}
